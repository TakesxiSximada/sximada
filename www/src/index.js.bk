import m from 'mithril'
import Login from './login/index.js'
import auth from './authentication.js'

import views from 'msx-loader!./views.msx'
import models from './models.js'


class IndexView {
    call (ctrl) {
        return m('div', [
            views.header_view(ctrl),
            views.index_view(ctrl),
            views.footer_view(ctrl),
        ]);
    }
}

class IndexController {
    call (){
        console.log(auth.token);
        // if (auth.token == null) {
        //     m.route('/login');
        // }
        return {
            test: m.prop('test'),
            list: () => m.route('/list'),
        }
    }

}


class IndexPage {
    constructor (){
        this._view = new IndexView();
        this._ctrl = new IndexController();
    }
    get view (){
        return this._view.call;
    }

    get controller (){
        return this._ctrl.call;
    }
}

class VideoListView {
    call (ctrl) {
        return m('div', [
            views.header_view(ctrl),
            views.list_view(ctrl),
            views.footer_view(ctrl),
        ]);
    }
}

function ctrl_factory(ctrl){
    return Object.assign(ctrl, {
        'goto_list': (video) => m.route('/list'),
        'goto_play': (video) => m.route('/play/' + video.code()),
        'goto_recording': () => m.route('/recording'),
    });
}

class VideoListController {
    call () {
        return ctrl_factory({
            'videos': m.prop(models.Video.query.all()),
        });
    }
}


class VideoListPage {
    constructor (){
        this._view = new VideoListView();
        this._ctrl = new VideoListController();
    }
    get view (){
        return this._view.call;
    }
    get controller (){
        return this._ctrl.call;
    }
}



class VideoRecordingView {
    call (ctrl) {
        return m('div', [
            views.header_view(ctrl),
            views.recording_view(ctrl),
            views.footer_view(ctrl),
        ]);
    }
}


class VideoRecordingController {
    call () {
        return ctrl_factory({
            setupRecorder: VideoRecordingController.setupRecorder,
        });
    }
    static setupRecorder (element, init, context) {
        if (!init){
            models.RecordingToken.query.get().then((recordingToken)=> {
                config_recorder(element, init, context, recordingToken);
            });
        }
    }
}


class VideoRecordingPage {
    constructor (){
        this._view = new VideoRecordingView();
        this._ctrl = new VideoRecordingController();
    }
    get view (){
        return this._view.call;
    }
    get controller (){
        return this._ctrl.call;
    }
}

class VideoPlayView {
    call (ctrl) {
        return m('div', [
            views.header_view(ctrl),
            views.play_view(ctrl),
            views.footer_view(ctrl),
        ]);
    }
}

class VideoPlayController {
    call () {
        return ctrl_factory({
            setupPlayer: VideoPlayController.setupPlayer,
        });
    }
    static setupPlayer (element, init, context) {
        if (!init){
            var videoCode = m.route.param('videoCode');
            // なぜか再生できないので一旦旧playerを使う
            // var player_class = ktvideo.Player;
            var player_class = VideoPlayerClient;
            models.PlayList.query.get(videoCode).then((playList)=> {
                var player = new player_class('#player');
                player.standby(playList.playlist_url());
            });
        }
    }
}

class VideoPlayPage {
    constructor (){
        this._view = new VideoPlayView();
        this._ctrl = new VideoPlayController();
    }
    get view (){
        return this._view.call;
    }
    get controller (){
        return this._ctrl.call;
    }
}

function log() {
    console.log.apply(console, arguments)
    var $log = $('#log')
    var msgs = []
    for (var i=0; i<arguments.length; ++i) {
        msgs.push(arguments[i])

    }
    $log.val(msgs.join(' ') + '\n' + $log.val())
}

function config_recorder(element, init, context, recordingToken) {
    var recUrl = recordingToken.recording_url();
    var commitUrl = recordingToken.recording_commit_url();
    var recToken = recordingToken.recording_token();
    var recorder = new ktvideo.Recorder(element, {
        maxWidth: 400,
        maxHeight: 400,
    })
        .on('record', function (msec) {
            log('record', msec, 'ms')

        })
        .on('commit', function (res) {
            log('commit!', JSON.stringify(res))
            log('エンコード中')
            var video = new models.Video({
                title: res.title,
                external_code: res.code,
                thumbnails: res.thumbnails,
            });
            video.save(commitUrl);
        })
        .on('finish', function (res) {
            log('エンコード終了');
            log('finish!', JSON.stringify(res))
            var video = new models.Video({
                title: res.title,
                external_code: res.code,
                thumbnails: res.thumbnails,
            });
            video.save(commitUrl).then((video_code) => {
                console.log('OK: goto ' + video_code);
                m.route('/play/' + video_code);
            });

        })
        .on('error', function (err) {
            log('エラー', err)
        })
    recorder.show()

    $('#recorder-start').attr('disabled', false).on('click', function (e) {
        log('click start', e)
        $('#recorder-stop').attr('disabled', false)
        recorder.record(recUrl, recToken)

    })
    $('#recorder-stop').on('click', function () {
        recorder.stop()
    })
}


m.route(document.querySelector('#demo-main'), '/list', {
    '/': new IndexPage(),
    '/login': new Login(),
    '/recording': new VideoRecordingPage(),
    '/play/:videoCode': new VideoPlayPage(),
    '/list': new VideoListPage(),
});
